# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sagittarius_object_color_detector/SGRCtrlGoal.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SGRCtrlGoal(genpy.Message):
  _md5sum = "50de9136543629965d564bc3ef4187c9"
  _type = "sagittarius_object_color_detector/SGRCtrlGoal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal

# grasp_type 参数的定义项
# 设置当前夹爪状态，在动作执行之前设置
uint8 GRASP_NONE = 0 # 自定义动作下使用，夹爪不做处理
uint8 GRASP_OPEN = 1 # 打开夹爪, 放下动作
uint8 GRASP_CLOSE = 2 # 闭合夹爪, 抓取动作

# action_type 参数的定义项
# 需要执行动作的类型，可以指定末端姿态或者自动计算
# 自定义姿态：是让机械臂到某个目标点
# 预设动作：是执行某个预设的一系列动作
uint8 ACTION_TYPE_XYZ = 0 # 自定义姿态：末端姿态使用动态计算
uint8 ACTION_TYPE_XYZ_RPY = 1 # 自定义姿态：末端姿态使用给定姿态
uint8 ACTION_TYPE_DEFINE_STAY = 2 # 预设动作：待机状态
uint8 ACTION_TYPE_DEFINE_SAVE = 3 # 预设动作：安全位置状态
uint8 ACTION_TYPE_PICK_XYZ = 4 # 预设动作：XYZ拾取动作
uint8 ACTION_TYPE_PICK_XYZ_RPY = 5 # 预设动作：XYZ+RPY拾取动作
uint8 ACTION_TYPE_PUT_XYZ = 6 # 预设动作：XYZ放下动作
uint8 ACTION_TYPE_PUT_XYZ_RPY = 7 # 预设动作：XYZ+RPY放下动作

uint8 grasp_type  # 末端初始化状态
uint8 action_type  # 动作类型

# 目标点位置
float64 pos_x
float64 pos_y
float64 pos_z
float64 pos_roll
float64 pos_pitch
float64 pos_yaw

"""
  # Pseudo-constants
  GRASP_NONE = 0
  GRASP_OPEN = 1
  GRASP_CLOSE = 2
  ACTION_TYPE_XYZ = 0
  ACTION_TYPE_XYZ_RPY = 1
  ACTION_TYPE_DEFINE_STAY = 2
  ACTION_TYPE_DEFINE_SAVE = 3
  ACTION_TYPE_PICK_XYZ = 4
  ACTION_TYPE_PICK_XYZ_RPY = 5
  ACTION_TYPE_PUT_XYZ = 6
  ACTION_TYPE_PUT_XYZ_RPY = 7

  __slots__ = ['grasp_type','action_type','pos_x','pos_y','pos_z','pos_roll','pos_pitch','pos_yaw']
  _slot_types = ['uint8','uint8','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       grasp_type,action_type,pos_x,pos_y,pos_z,pos_roll,pos_pitch,pos_yaw

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SGRCtrlGoal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.grasp_type is None:
        self.grasp_type = 0
      if self.action_type is None:
        self.action_type = 0
      if self.pos_x is None:
        self.pos_x = 0.
      if self.pos_y is None:
        self.pos_y = 0.
      if self.pos_z is None:
        self.pos_z = 0.
      if self.pos_roll is None:
        self.pos_roll = 0.
      if self.pos_pitch is None:
        self.pos_pitch = 0.
      if self.pos_yaw is None:
        self.pos_yaw = 0.
    else:
      self.grasp_type = 0
      self.action_type = 0
      self.pos_x = 0.
      self.pos_y = 0.
      self.pos_z = 0.
      self.pos_roll = 0.
      self.pos_pitch = 0.
      self.pos_yaw = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B6d().pack(_x.grasp_type, _x.action_type, _x.pos_x, _x.pos_y, _x.pos_z, _x.pos_roll, _x.pos_pitch, _x.pos_yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 50
      (_x.grasp_type, _x.action_type, _x.pos_x, _x.pos_y, _x.pos_z, _x.pos_roll, _x.pos_pitch, _x.pos_yaw,) = _get_struct_2B6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B6d().pack(_x.grasp_type, _x.action_type, _x.pos_x, _x.pos_y, _x.pos_z, _x.pos_roll, _x.pos_pitch, _x.pos_yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 50
      (_x.grasp_type, _x.action_type, _x.pos_x, _x.pos_y, _x.pos_z, _x.pos_roll, _x.pos_pitch, _x.pos_yaw,) = _get_struct_2B6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B6d = None
def _get_struct_2B6d():
    global _struct_2B6d
    if _struct_2B6d is None:
        _struct_2B6d = struct.Struct("<2B6d")
    return _struct_2B6d
