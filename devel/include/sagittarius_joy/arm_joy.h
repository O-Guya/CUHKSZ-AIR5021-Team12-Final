// Generated by gencpp from file sagittarius_joy/arm_joy.msg
// DO NOT EDIT!


#ifndef SAGITTARIUS_JOY_MESSAGE_ARM_JOY_H
#define SAGITTARIUS_JOY_MESSAGE_ARM_JOY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sagittarius_joy
{
template <class ContainerAllocator>
struct arm_joy_
{
  typedef arm_joy_<ContainerAllocator> Type;

  arm_joy_()
    : ee_x_cmd(0)
    , ee_y_cmd(0)
    , ee_z_cmd(0)
    , ee_roll_cmd(0)
    , ee_pitch_cmd(0)
    , ee_yaw_cmd(0)
    , pose_cmd(0)
    , reset_cmd(0)
    , speed_cmd(0)
    , gripper_spacing_cmd(0)
    , torque_cmd(0)
    , torque_lev_cmd(0)
    , super_cmd(0)  {
    }
  arm_joy_(const ContainerAllocator& _alloc)
    : ee_x_cmd(0)
    , ee_y_cmd(0)
    , ee_z_cmd(0)
    , ee_roll_cmd(0)
    , ee_pitch_cmd(0)
    , ee_yaw_cmd(0)
    , pose_cmd(0)
    , reset_cmd(0)
    , speed_cmd(0)
    , gripper_spacing_cmd(0)
    , torque_cmd(0)
    , torque_lev_cmd(0)
    , super_cmd(0)  {
  (void)_alloc;
    }



   typedef int8_t _ee_x_cmd_type;
  _ee_x_cmd_type ee_x_cmd;

   typedef int8_t _ee_y_cmd_type;
  _ee_y_cmd_type ee_y_cmd;

   typedef int8_t _ee_z_cmd_type;
  _ee_z_cmd_type ee_z_cmd;

   typedef int8_t _ee_roll_cmd_type;
  _ee_roll_cmd_type ee_roll_cmd;

   typedef int8_t _ee_pitch_cmd_type;
  _ee_pitch_cmd_type ee_pitch_cmd;

   typedef int8_t _ee_yaw_cmd_type;
  _ee_yaw_cmd_type ee_yaw_cmd;

   typedef int8_t _pose_cmd_type;
  _pose_cmd_type pose_cmd;

   typedef int8_t _reset_cmd_type;
  _reset_cmd_type reset_cmd;

   typedef int8_t _speed_cmd_type;
  _speed_cmd_type speed_cmd;

   typedef int8_t _gripper_spacing_cmd_type;
  _gripper_spacing_cmd_type gripper_spacing_cmd;

   typedef int8_t _torque_cmd_type;
  _torque_cmd_type torque_cmd;

   typedef int8_t _torque_lev_cmd_type;
  _torque_lev_cmd_type torque_lev_cmd;

   typedef int8_t _super_cmd_type;
  _super_cmd_type super_cmd;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(EE_X_INC)
  #undef EE_X_INC
#endif
#if defined(_WIN32) && defined(EE_X_DEC)
  #undef EE_X_DEC
#endif
#if defined(_WIN32) && defined(EE_Y_INC)
  #undef EE_Y_INC
#endif
#if defined(_WIN32) && defined(EE_Y_DEC)
  #undef EE_Y_DEC
#endif
#if defined(_WIN32) && defined(EE_Z_INC)
  #undef EE_Z_INC
#endif
#if defined(_WIN32) && defined(EE_Z_DEC)
  #undef EE_Z_DEC
#endif
#if defined(_WIN32) && defined(EE_ROLL_CCW)
  #undef EE_ROLL_CCW
#endif
#if defined(_WIN32) && defined(EE_ROLL_CW)
  #undef EE_ROLL_CW
#endif
#if defined(_WIN32) && defined(EE_PITCH_UP)
  #undef EE_PITCH_UP
#endif
#if defined(_WIN32) && defined(EE_PITCH_DOWN)
  #undef EE_PITCH_DOWN
#endif
#if defined(_WIN32) && defined(EE_YAW_LEFT)
  #undef EE_YAW_LEFT
#endif
#if defined(_WIN32) && defined(EE_YAW_RIGHT)
  #undef EE_YAW_RIGHT
#endif
#if defined(_WIN32) && defined(UP_POSE)
  #undef UP_POSE
#endif
#if defined(_WIN32) && defined(HOME_POSE)
  #undef HOME_POSE
#endif
#if defined(_WIN32) && defined(SLEEP_POSE)
  #undef SLEEP_POSE
#endif
#if defined(_WIN32) && defined(POSITION_RESET)
  #undef POSITION_RESET
#endif
#if defined(_WIN32) && defined(ORIENTATION_RESET)
  #undef ORIENTATION_RESET
#endif
#if defined(_WIN32) && defined(SPEED_INC)
  #undef SPEED_INC
#endif
#if defined(_WIN32) && defined(SPEED_DEC)
  #undef SPEED_DEC
#endif
#if defined(_WIN32) && defined(GRIPPER_SPACING_INC)
  #undef GRIPPER_SPACING_INC
#endif
#if defined(_WIN32) && defined(GRIPPER_SPACING_DEC)
  #undef GRIPPER_SPACING_DEC
#endif
#if defined(_WIN32) && defined(TORQUE_ON)
  #undef TORQUE_ON
#endif
#if defined(_WIN32) && defined(TORQUE_OFF)
  #undef TORQUE_OFF
#endif
#if defined(_WIN32) && defined(TORQUE_INC)
  #undef TORQUE_INC
#endif
#if defined(_WIN32) && defined(TORQUE_DEC)
  #undef TORQUE_DEC
#endif
#if defined(_WIN32) && defined(SUPER_KEY)
  #undef SUPER_KEY
#endif

  enum {
    EE_X_INC = 1,
    EE_X_DEC = 2,
    EE_Y_INC = 3,
    EE_Y_DEC = 4,
    EE_Z_INC = 5,
    EE_Z_DEC = 6,
    EE_ROLL_CCW = 7,
    EE_ROLL_CW = 8,
    EE_PITCH_UP = 9,
    EE_PITCH_DOWN = 10,
    EE_YAW_LEFT = 11,
    EE_YAW_RIGHT = 12,
    UP_POSE = 13,
    HOME_POSE = 14,
    SLEEP_POSE = 15,
    POSITION_RESET = 16,
    ORIENTATION_RESET = 17,
    SPEED_INC = 18,
    SPEED_DEC = 19,
    GRIPPER_SPACING_INC = 20,
    GRIPPER_SPACING_DEC = 21,
    TORQUE_ON = 22,
    TORQUE_OFF = 23,
    TORQUE_INC = 24,
    TORQUE_DEC = 25,
    SUPER_KEY = 26,
  };


  typedef boost::shared_ptr< ::sagittarius_joy::arm_joy_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sagittarius_joy::arm_joy_<ContainerAllocator> const> ConstPtr;

}; // struct arm_joy_

typedef ::sagittarius_joy::arm_joy_<std::allocator<void> > arm_joy;

typedef boost::shared_ptr< ::sagittarius_joy::arm_joy > arm_joyPtr;
typedef boost::shared_ptr< ::sagittarius_joy::arm_joy const> arm_joyConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sagittarius_joy::arm_joy_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sagittarius_joy::arm_joy_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sagittarius_joy::arm_joy_<ContainerAllocator1> & lhs, const ::sagittarius_joy::arm_joy_<ContainerAllocator2> & rhs)
{
  return lhs.ee_x_cmd == rhs.ee_x_cmd &&
    lhs.ee_y_cmd == rhs.ee_y_cmd &&
    lhs.ee_z_cmd == rhs.ee_z_cmd &&
    lhs.ee_roll_cmd == rhs.ee_roll_cmd &&
    lhs.ee_pitch_cmd == rhs.ee_pitch_cmd &&
    lhs.ee_yaw_cmd == rhs.ee_yaw_cmd &&
    lhs.pose_cmd == rhs.pose_cmd &&
    lhs.reset_cmd == rhs.reset_cmd &&
    lhs.speed_cmd == rhs.speed_cmd &&
    lhs.gripper_spacing_cmd == rhs.gripper_spacing_cmd &&
    lhs.torque_cmd == rhs.torque_cmd &&
    lhs.torque_lev_cmd == rhs.torque_lev_cmd &&
    lhs.super_cmd == rhs.super_cmd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sagittarius_joy::arm_joy_<ContainerAllocator1> & lhs, const ::sagittarius_joy::arm_joy_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sagittarius_joy

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sagittarius_joy::arm_joy_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sagittarius_joy::arm_joy_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sagittarius_joy::arm_joy_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sagittarius_joy::arm_joy_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sagittarius_joy::arm_joy_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sagittarius_joy::arm_joy_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sagittarius_joy::arm_joy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aee021bfef1da6cac98533007e49228c";
  }

  static const char* value(const ::sagittarius_joy::arm_joy_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaee021bfef1da6caULL;
  static const uint64_t static_value2 = 0xc98533007e49228cULL;
};

template<class ContainerAllocator>
struct DataType< ::sagittarius_joy::arm_joy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sagittarius_joy/arm_joy";
  }

  static const char* value(const ::sagittarius_joy::arm_joy_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sagittarius_joy::arm_joy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"# This message is used specifically in the sagittarius_joy package\n"
"#\n"
"# Maps raw 'joy' commands to more specific ones to control an sagittarius\n"
"\n"
"# enum values that define the joystick controls for the robot\n"
"\n"
"#########################################################################################################\n"
"\n"
"# Control the motion of the virtual 'ee_gripper_link' or end effector using the modern_robotics_ik engine\n"
"# Position Control\n"
"int8 EE_X_INC = 1\n"
"int8 EE_X_DEC = 2\n"
"int8 EE_Y_INC = 3\n"
"int8 EE_Y_DEC = 4\n"
"int8 EE_Z_INC = 5\n"
"int8 EE_Z_DEC = 6\n"
"\n"
"# Orientation Control\n"
"int8 EE_ROLL_CCW = 7\n"
"int8 EE_ROLL_CW = 8\n"
"int8 EE_PITCH_UP = 9\n"
"int8 EE_PITCH_DOWN = 10\n"
"int8 EE_YAW_LEFT = 11\n"
"int8 EE_YAW_RIGHT = 12\n"
"\n"
"#########################################################################################################\n"
"\n"
"# Control the motion of independent joints on the Arm or send predefined robot poses\n"
"# Pose Control\n"
"int8 UP_POSE = 13\n"
"int8 HOME_POSE = 14\n"
"int8 SLEEP_POSE = 15\n"
"\n"
"# Position and Orientation reset\n"
"int8 POSITION_RESET = 16\n"
"int8 ORIENTATION_RESET = 17\n"
"\n"
"#########################################################################################################\n"
"\n"
"# Customize configurations for the Sagittarius Arm\n"
"# Inc/Dec Joint speed\n"
"int8 SPEED_INC = 18\n"
"int8 SPEED_DEC = 19\n"
"\n"
"# Inc/Dec Gripper spacing\n"
"int8 GRIPPER_SPACING_INC = 20\n"
"int8 GRIPPER_SPACING_DEC = 21\n"
"\n"
"# Torque On/Off all servos\n"
"int8 TORQUE_ON = 22\n"
"int8 TORQUE_OFF = 23\n"
"\n"
"# Torque Inc/Dec all servos\n"
"int8 TORQUE_INC = 24\n"
"int8 TORQUE_DEC = 25\n"
"\n"
"#########################################################################################################\n"
"\n"
"# Other function for the Sagittarius Arm\n"
"# Super Key\n"
"int8 SUPER_KEY = 26\n"
"\n"
"#########################################################################################################\n"
"\n"
"# Control the motion of the Sagittarius Arm\n"
"int8 ee_x_cmd\n"
"int8 ee_y_cmd\n"
"int8 ee_z_cmd\n"
"int8 ee_roll_cmd\n"
"int8 ee_pitch_cmd\n"
"int8 ee_yaw_cmd\n"
"\n"
"# Independent Joint/Pose Control\n"
"int8 pose_cmd\n"
"int8 reset_cmd\n"
"\n"
"# Misc. Configs\n"
"int8 speed_cmd\n"
"int8 gripper_spacing_cmd\n"
"int8 torque_cmd\n"
"int8 torque_lev_cmd\n"
"\n"
"# Super key\n"
"int8 super_cmd\n"
;
  }

  static const char* value(const ::sagittarius_joy::arm_joy_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sagittarius_joy::arm_joy_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ee_x_cmd);
      stream.next(m.ee_y_cmd);
      stream.next(m.ee_z_cmd);
      stream.next(m.ee_roll_cmd);
      stream.next(m.ee_pitch_cmd);
      stream.next(m.ee_yaw_cmd);
      stream.next(m.pose_cmd);
      stream.next(m.reset_cmd);
      stream.next(m.speed_cmd);
      stream.next(m.gripper_spacing_cmd);
      stream.next(m.torque_cmd);
      stream.next(m.torque_lev_cmd);
      stream.next(m.super_cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arm_joy_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sagittarius_joy::arm_joy_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sagittarius_joy::arm_joy_<ContainerAllocator>& v)
  {
    s << indent << "ee_x_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ee_x_cmd);
    s << indent << "ee_y_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ee_y_cmd);
    s << indent << "ee_z_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ee_z_cmd);
    s << indent << "ee_roll_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ee_roll_cmd);
    s << indent << "ee_pitch_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ee_pitch_cmd);
    s << indent << "ee_yaw_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ee_yaw_cmd);
    s << indent << "pose_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.pose_cmd);
    s << indent << "reset_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.reset_cmd);
    s << indent << "speed_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.speed_cmd);
    s << indent << "gripper_spacing_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.gripper_spacing_cmd);
    s << indent << "torque_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.torque_cmd);
    s << indent << "torque_lev_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.torque_lev_cmd);
    s << indent << "super_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.super_cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SAGITTARIUS_JOY_MESSAGE_ARM_JOY_H
