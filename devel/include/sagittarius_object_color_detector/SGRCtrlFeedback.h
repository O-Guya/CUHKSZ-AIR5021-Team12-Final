// Generated by gencpp from file sagittarius_object_color_detector/SGRCtrlFeedback.msg
// DO NOT EDIT!


#ifndef SAGITTARIUS_OBJECT_COLOR_DETECTOR_MESSAGE_SGRCTRLFEEDBACK_H
#define SAGITTARIUS_OBJECT_COLOR_DETECTOR_MESSAGE_SGRCTRLFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sagittarius_object_color_detector
{
template <class ContainerAllocator>
struct SGRCtrlFeedback_
{
  typedef SGRCtrlFeedback_<ContainerAllocator> Type;

  SGRCtrlFeedback_()
    : step(0)  {
    }
  SGRCtrlFeedback_(const ContainerAllocator& _alloc)
    : step(0)  {
  (void)_alloc;
    }



   typedef uint8_t _step_type;
  _step_type step;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PLANNING)
  #undef PLANNING
#endif
#if defined(_WIN32) && defined(EXEC_POSITION)
  #undef EXEC_POSITION
#endif
#if defined(_WIN32) && defined(EXEC_GRASP)
  #undef EXEC_GRASP
#endif

  enum {
    PLANNING = 0u,
    EXEC_POSITION = 1u,
    EXEC_GRASP = 2u,
  };


  typedef boost::shared_ptr< ::sagittarius_object_color_detector::SGRCtrlFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sagittarius_object_color_detector::SGRCtrlFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct SGRCtrlFeedback_

typedef ::sagittarius_object_color_detector::SGRCtrlFeedback_<std::allocator<void> > SGRCtrlFeedback;

typedef boost::shared_ptr< ::sagittarius_object_color_detector::SGRCtrlFeedback > SGRCtrlFeedbackPtr;
typedef boost::shared_ptr< ::sagittarius_object_color_detector::SGRCtrlFeedback const> SGRCtrlFeedbackConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sagittarius_object_color_detector::SGRCtrlFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sagittarius_object_color_detector::SGRCtrlFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sagittarius_object_color_detector::SGRCtrlFeedback_<ContainerAllocator1> & lhs, const ::sagittarius_object_color_detector::SGRCtrlFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.step == rhs.step;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sagittarius_object_color_detector::SGRCtrlFeedback_<ContainerAllocator1> & lhs, const ::sagittarius_object_color_detector::SGRCtrlFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sagittarius_object_color_detector

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sagittarius_object_color_detector::SGRCtrlFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sagittarius_object_color_detector::SGRCtrlFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sagittarius_object_color_detector::SGRCtrlFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sagittarius_object_color_detector::SGRCtrlFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sagittarius_object_color_detector::SGRCtrlFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sagittarius_object_color_detector::SGRCtrlFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sagittarius_object_color_detector::SGRCtrlFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "16415215c939077a0b815877705c9bee";
  }

  static const char* value(const ::sagittarius_object_color_detector::SGRCtrlFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x16415215c939077aULL;
  static const uint64_t static_value2 = 0x0b815877705c9beeULL;
};

template<class ContainerAllocator>
struct DataType< ::sagittarius_object_color_detector::SGRCtrlFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sagittarius_object_color_detector/SGRCtrlFeedback";
  }

  static const char* value(const ::sagittarius_object_color_detector::SGRCtrlFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sagittarius_object_color_detector::SGRCtrlFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define a feedback message\n"
"uint8 PLANNING = 0\n"
"uint8 EXEC_POSITION = 1\n"
"uint8 EXEC_GRASP = 2\n"
"\n"
"# 当前步骤\n"
"uint8 step\n"
;
  }

  static const char* value(const ::sagittarius_object_color_detector::SGRCtrlFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sagittarius_object_color_detector::SGRCtrlFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.step);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SGRCtrlFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sagittarius_object_color_detector::SGRCtrlFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sagittarius_object_color_detector::SGRCtrlFeedback_<ContainerAllocator>& v)
  {
    s << indent << "step: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.step);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SAGITTARIUS_OBJECT_COLOR_DETECTOR_MESSAGE_SGRCTRLFEEDBACK_H
