// Generated by gencpp from file sagittarius_object_color_detector/SGRCtrlGoal.msg
// DO NOT EDIT!


#ifndef SAGITTARIUS_OBJECT_COLOR_DETECTOR_MESSAGE_SGRCTRLGOAL_H
#define SAGITTARIUS_OBJECT_COLOR_DETECTOR_MESSAGE_SGRCTRLGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sagittarius_object_color_detector
{
template <class ContainerAllocator>
struct SGRCtrlGoal_
{
  typedef SGRCtrlGoal_<ContainerAllocator> Type;

  SGRCtrlGoal_()
    : grasp_type(0)
    , action_type(0)
    , pos_x(0.0)
    , pos_y(0.0)
    , pos_z(0.0)
    , pos_roll(0.0)
    , pos_pitch(0.0)
    , pos_yaw(0.0)  {
    }
  SGRCtrlGoal_(const ContainerAllocator& _alloc)
    : grasp_type(0)
    , action_type(0)
    , pos_x(0.0)
    , pos_y(0.0)
    , pos_z(0.0)
    , pos_roll(0.0)
    , pos_pitch(0.0)
    , pos_yaw(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _grasp_type_type;
  _grasp_type_type grasp_type;

   typedef uint8_t _action_type_type;
  _action_type_type action_type;

   typedef double _pos_x_type;
  _pos_x_type pos_x;

   typedef double _pos_y_type;
  _pos_y_type pos_y;

   typedef double _pos_z_type;
  _pos_z_type pos_z;

   typedef double _pos_roll_type;
  _pos_roll_type pos_roll;

   typedef double _pos_pitch_type;
  _pos_pitch_type pos_pitch;

   typedef double _pos_yaw_type;
  _pos_yaw_type pos_yaw;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(GRASP_NONE)
  #undef GRASP_NONE
#endif
#if defined(_WIN32) && defined(GRASP_OPEN)
  #undef GRASP_OPEN
#endif
#if defined(_WIN32) && defined(GRASP_CLOSE)
  #undef GRASP_CLOSE
#endif
#if defined(_WIN32) && defined(ACTION_TYPE_XYZ)
  #undef ACTION_TYPE_XYZ
#endif
#if defined(_WIN32) && defined(ACTION_TYPE_XYZ_RPY)
  #undef ACTION_TYPE_XYZ_RPY
#endif
#if defined(_WIN32) && defined(ACTION_TYPE_DEFINE_STAY)
  #undef ACTION_TYPE_DEFINE_STAY
#endif
#if defined(_WIN32) && defined(ACTION_TYPE_DEFINE_SAVE)
  #undef ACTION_TYPE_DEFINE_SAVE
#endif
#if defined(_WIN32) && defined(ACTION_TYPE_PICK_XYZ)
  #undef ACTION_TYPE_PICK_XYZ
#endif
#if defined(_WIN32) && defined(ACTION_TYPE_PICK_XYZ_RPY)
  #undef ACTION_TYPE_PICK_XYZ_RPY
#endif
#if defined(_WIN32) && defined(ACTION_TYPE_PUT_XYZ)
  #undef ACTION_TYPE_PUT_XYZ
#endif
#if defined(_WIN32) && defined(ACTION_TYPE_PUT_XYZ_RPY)
  #undef ACTION_TYPE_PUT_XYZ_RPY
#endif

  enum {
    GRASP_NONE = 0u,
    GRASP_OPEN = 1u,
    GRASP_CLOSE = 2u,
    ACTION_TYPE_XYZ = 0u,
    ACTION_TYPE_XYZ_RPY = 1u,
    ACTION_TYPE_DEFINE_STAY = 2u,
    ACTION_TYPE_DEFINE_SAVE = 3u,
    ACTION_TYPE_PICK_XYZ = 4u,
    ACTION_TYPE_PICK_XYZ_RPY = 5u,
    ACTION_TYPE_PUT_XYZ = 6u,
    ACTION_TYPE_PUT_XYZ_RPY = 7u,
  };


  typedef boost::shared_ptr< ::sagittarius_object_color_detector::SGRCtrlGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sagittarius_object_color_detector::SGRCtrlGoal_<ContainerAllocator> const> ConstPtr;

}; // struct SGRCtrlGoal_

typedef ::sagittarius_object_color_detector::SGRCtrlGoal_<std::allocator<void> > SGRCtrlGoal;

typedef boost::shared_ptr< ::sagittarius_object_color_detector::SGRCtrlGoal > SGRCtrlGoalPtr;
typedef boost::shared_ptr< ::sagittarius_object_color_detector::SGRCtrlGoal const> SGRCtrlGoalConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sagittarius_object_color_detector::SGRCtrlGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sagittarius_object_color_detector::SGRCtrlGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sagittarius_object_color_detector::SGRCtrlGoal_<ContainerAllocator1> & lhs, const ::sagittarius_object_color_detector::SGRCtrlGoal_<ContainerAllocator2> & rhs)
{
  return lhs.grasp_type == rhs.grasp_type &&
    lhs.action_type == rhs.action_type &&
    lhs.pos_x == rhs.pos_x &&
    lhs.pos_y == rhs.pos_y &&
    lhs.pos_z == rhs.pos_z &&
    lhs.pos_roll == rhs.pos_roll &&
    lhs.pos_pitch == rhs.pos_pitch &&
    lhs.pos_yaw == rhs.pos_yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sagittarius_object_color_detector::SGRCtrlGoal_<ContainerAllocator1> & lhs, const ::sagittarius_object_color_detector::SGRCtrlGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sagittarius_object_color_detector

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sagittarius_object_color_detector::SGRCtrlGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sagittarius_object_color_detector::SGRCtrlGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sagittarius_object_color_detector::SGRCtrlGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sagittarius_object_color_detector::SGRCtrlGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sagittarius_object_color_detector::SGRCtrlGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sagittarius_object_color_detector::SGRCtrlGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sagittarius_object_color_detector::SGRCtrlGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "50de9136543629965d564bc3ef4187c9";
  }

  static const char* value(const ::sagittarius_object_color_detector::SGRCtrlGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x50de913654362996ULL;
  static const uint64_t static_value2 = 0x5d564bc3ef4187c9ULL;
};

template<class ContainerAllocator>
struct DataType< ::sagittarius_object_color_detector::SGRCtrlGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sagittarius_object_color_detector/SGRCtrlGoal";
  }

  static const char* value(const ::sagittarius_object_color_detector::SGRCtrlGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sagittarius_object_color_detector::SGRCtrlGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"\n"
"# grasp_type 参数的定义项\n"
"# 设置当前夹爪状态，在动作执行之前设置\n"
"uint8 GRASP_NONE = 0 # 自定义动作下使用，夹爪不做处理\n"
"uint8 GRASP_OPEN = 1 # 打开夹爪, 放下动作\n"
"uint8 GRASP_CLOSE = 2 # 闭合夹爪, 抓取动作\n"
"\n"
"# action_type 参数的定义项\n"
"# 需要执行动作的类型，可以指定末端姿态或者自动计算\n"
"# 自定义姿态：是让机械臂到某个目标点\n"
"# 预设动作：是执行某个预设的一系列动作\n"
"uint8 ACTION_TYPE_XYZ = 0 # 自定义姿态：末端姿态使用动态计算\n"
"uint8 ACTION_TYPE_XYZ_RPY = 1 # 自定义姿态：末端姿态使用给定姿态\n"
"uint8 ACTION_TYPE_DEFINE_STAY = 2 # 预设动作：待机状态\n"
"uint8 ACTION_TYPE_DEFINE_SAVE = 3 # 预设动作：安全位置状态\n"
"uint8 ACTION_TYPE_PICK_XYZ = 4 # 预设动作：XYZ拾取动作\n"
"uint8 ACTION_TYPE_PICK_XYZ_RPY = 5 # 预设动作：XYZ+RPY拾取动作\n"
"uint8 ACTION_TYPE_PUT_XYZ = 6 # 预设动作：XYZ放下动作\n"
"uint8 ACTION_TYPE_PUT_XYZ_RPY = 7 # 预设动作：XYZ+RPY放下动作\n"
"\n"
"uint8 grasp_type  # 末端初始化状态\n"
"uint8 action_type  # 动作类型\n"
"\n"
"# 目标点位置\n"
"float64 pos_x\n"
"float64 pos_y\n"
"float64 pos_z\n"
"float64 pos_roll\n"
"float64 pos_pitch\n"
"float64 pos_yaw\n"
"\n"
;
  }

  static const char* value(const ::sagittarius_object_color_detector::SGRCtrlGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sagittarius_object_color_detector::SGRCtrlGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.grasp_type);
      stream.next(m.action_type);
      stream.next(m.pos_x);
      stream.next(m.pos_y);
      stream.next(m.pos_z);
      stream.next(m.pos_roll);
      stream.next(m.pos_pitch);
      stream.next(m.pos_yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SGRCtrlGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sagittarius_object_color_detector::SGRCtrlGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sagittarius_object_color_detector::SGRCtrlGoal_<ContainerAllocator>& v)
  {
    s << indent << "grasp_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.grasp_type);
    s << indent << "action_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.action_type);
    s << indent << "pos_x: ";
    Printer<double>::stream(s, indent + "  ", v.pos_x);
    s << indent << "pos_y: ";
    Printer<double>::stream(s, indent + "  ", v.pos_y);
    s << indent << "pos_z: ";
    Printer<double>::stream(s, indent + "  ", v.pos_z);
    s << indent << "pos_roll: ";
    Printer<double>::stream(s, indent + "  ", v.pos_roll);
    s << indent << "pos_pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pos_pitch);
    s << indent << "pos_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.pos_yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SAGITTARIUS_OBJECT_COLOR_DETECTOR_MESSAGE_SGRCTRLGOAL_H
