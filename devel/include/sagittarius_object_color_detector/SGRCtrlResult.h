// Generated by gencpp from file sagittarius_object_color_detector/SGRCtrlResult.msg
// DO NOT EDIT!


#ifndef SAGITTARIUS_OBJECT_COLOR_DETECTOR_MESSAGE_SGRCTRLRESULT_H
#define SAGITTARIUS_OBJECT_COLOR_DETECTOR_MESSAGE_SGRCTRLRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sagittarius_object_color_detector
{
template <class ContainerAllocator>
struct SGRCtrlResult_
{
  typedef SGRCtrlResult_<ContainerAllocator> Type;

  SGRCtrlResult_()
    : result(0)  {
    }
  SGRCtrlResult_(const ContainerAllocator& _alloc)
    : result(0)  {
  (void)_alloc;
    }



   typedef uint8_t _result_type;
  _result_type result;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SUCCESS)
  #undef SUCCESS
#endif
#if defined(_WIN32) && defined(ERROR)
  #undef ERROR
#endif
#if defined(_WIN32) && defined(PREEMPT)
  #undef PREEMPT
#endif
#if defined(_WIN32) && defined(PLAN_NOT_FOUND)
  #undef PLAN_NOT_FOUND
#endif
#if defined(_WIN32) && defined(GRASP_FAILD)
  #undef GRASP_FAILD
#endif

  enum {
    SUCCESS = 0u,
    ERROR = 1u,
    PREEMPT = 2u,
    PLAN_NOT_FOUND = 3u,
    GRASP_FAILD = 4u,
  };


  typedef boost::shared_ptr< ::sagittarius_object_color_detector::SGRCtrlResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sagittarius_object_color_detector::SGRCtrlResult_<ContainerAllocator> const> ConstPtr;

}; // struct SGRCtrlResult_

typedef ::sagittarius_object_color_detector::SGRCtrlResult_<std::allocator<void> > SGRCtrlResult;

typedef boost::shared_ptr< ::sagittarius_object_color_detector::SGRCtrlResult > SGRCtrlResultPtr;
typedef boost::shared_ptr< ::sagittarius_object_color_detector::SGRCtrlResult const> SGRCtrlResultConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sagittarius_object_color_detector::SGRCtrlResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sagittarius_object_color_detector::SGRCtrlResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sagittarius_object_color_detector::SGRCtrlResult_<ContainerAllocator1> & lhs, const ::sagittarius_object_color_detector::SGRCtrlResult_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sagittarius_object_color_detector::SGRCtrlResult_<ContainerAllocator1> & lhs, const ::sagittarius_object_color_detector::SGRCtrlResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sagittarius_object_color_detector

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sagittarius_object_color_detector::SGRCtrlResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sagittarius_object_color_detector::SGRCtrlResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sagittarius_object_color_detector::SGRCtrlResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sagittarius_object_color_detector::SGRCtrlResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sagittarius_object_color_detector::SGRCtrlResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sagittarius_object_color_detector::SGRCtrlResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sagittarius_object_color_detector::SGRCtrlResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6cd16eb95067452fc55413e9ecaf8f88";
  }

  static const char* value(const ::sagittarius_object_color_detector::SGRCtrlResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6cd16eb95067452fULL;
  static const uint64_t static_value2 = 0xc55413e9ecaf8f88ULL;
};

template<class ContainerAllocator>
struct DataType< ::sagittarius_object_color_detector::SGRCtrlResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sagittarius_object_color_detector/SGRCtrlResult";
  }

  static const char* value(const ::sagittarius_object_color_detector::SGRCtrlResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sagittarius_object_color_detector::SGRCtrlResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the result\n"
"uint8 SUCCESS = 0\n"
"uint8 ERROR = 1\n"
"uint8 PREEMPT = 2\n"
"uint8 PLAN_NOT_FOUND = 3\n"
"uint8 GRASP_FAILD = 4 # 抓空\n"
"\n"
"# 执行结果\n"
"uint8 result\n"
"\n"
;
  }

  static const char* value(const ::sagittarius_object_color_detector::SGRCtrlResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sagittarius_object_color_detector::SGRCtrlResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SGRCtrlResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sagittarius_object_color_detector::SGRCtrlResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sagittarius_object_color_detector::SGRCtrlResult_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SAGITTARIUS_OBJECT_COLOR_DETECTOR_MESSAGE_SGRCTRLRESULT_H
