// Generated by gencpp from file sdk_sagittarius_arm/SingleRadControl.msg
// DO NOT EDIT!


#ifndef SDK_SAGITTARIUS_ARM_MESSAGE_SINGLERADCONTROL_H
#define SDK_SAGITTARIUS_ARM_MESSAGE_SINGLERADCONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sdk_sagittarius_arm
{
template <class ContainerAllocator>
struct SingleRadControl_
{
  typedef SingleRadControl_<ContainerAllocator> Type;

  SingleRadControl_()
    : joint_name()
    , rad(0.0)  {
    }
  SingleRadControl_(const ContainerAllocator& _alloc)
    : joint_name(_alloc)
    , rad(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _joint_name_type;
  _joint_name_type joint_name;

   typedef double _rad_type;
  _rad_type rad;





  typedef boost::shared_ptr< ::sdk_sagittarius_arm::SingleRadControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sdk_sagittarius_arm::SingleRadControl_<ContainerAllocator> const> ConstPtr;

}; // struct SingleRadControl_

typedef ::sdk_sagittarius_arm::SingleRadControl_<std::allocator<void> > SingleRadControl;

typedef boost::shared_ptr< ::sdk_sagittarius_arm::SingleRadControl > SingleRadControlPtr;
typedef boost::shared_ptr< ::sdk_sagittarius_arm::SingleRadControl const> SingleRadControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sdk_sagittarius_arm::SingleRadControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sdk_sagittarius_arm::SingleRadControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sdk_sagittarius_arm::SingleRadControl_<ContainerAllocator1> & lhs, const ::sdk_sagittarius_arm::SingleRadControl_<ContainerAllocator2> & rhs)
{
  return lhs.joint_name == rhs.joint_name &&
    lhs.rad == rhs.rad;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sdk_sagittarius_arm::SingleRadControl_<ContainerAllocator1> & lhs, const ::sdk_sagittarius_arm::SingleRadControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sdk_sagittarius_arm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sdk_sagittarius_arm::SingleRadControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sdk_sagittarius_arm::SingleRadControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sdk_sagittarius_arm::SingleRadControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sdk_sagittarius_arm::SingleRadControl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdk_sagittarius_arm::SingleRadControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdk_sagittarius_arm::SingleRadControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sdk_sagittarius_arm::SingleRadControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "22b26ccad5f2f7c78e2804a1f134b947";
  }

  static const char* value(const ::sdk_sagittarius_arm::SingleRadControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x22b26ccad5f2f7c7ULL;
  static const uint64_t static_value2 = 0x8e2804a1f134b947ULL;
};

template<class ContainerAllocator>
struct DataType< ::sdk_sagittarius_arm::SingleRadControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sdk_sagittarius_arm/SingleRadControl";
  }

  static const char* value(const ::sdk_sagittarius_arm::SingleRadControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sdk_sagittarius_arm::SingleRadControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 单个舵机控制\n"
"\n"
"string joint_name\n"
"float64 rad\n"
;
  }

  static const char* value(const ::sdk_sagittarius_arm::SingleRadControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sdk_sagittarius_arm::SingleRadControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_name);
      stream.next(m.rad);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SingleRadControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sdk_sagittarius_arm::SingleRadControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sdk_sagittarius_arm::SingleRadControl_<ContainerAllocator>& v)
  {
    s << indent << "joint_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.joint_name);
    s << indent << "rad: ";
    Printer<double>::stream(s, indent + "  ", v.rad);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SDK_SAGITTARIUS_ARM_MESSAGE_SINGLERADCONTROL_H
