// Generated by gencpp from file sdk_sagittarius_arm/ArmRadControl.msg
// DO NOT EDIT!


#ifndef SDK_SAGITTARIUS_ARM_MESSAGE_ARMRADCONTROL_H
#define SDK_SAGITTARIUS_ARM_MESSAGE_ARMRADCONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sdk_sagittarius_arm
{
template <class ContainerAllocator>
struct ArmRadControl_
{
  typedef ArmRadControl_<ContainerAllocator> Type;

  ArmRadControl_()
    : rad()  {
    }
  ArmRadControl_(const ContainerAllocator& _alloc)
    : rad(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _rad_type;
  _rad_type rad;





  typedef boost::shared_ptr< ::sdk_sagittarius_arm::ArmRadControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sdk_sagittarius_arm::ArmRadControl_<ContainerAllocator> const> ConstPtr;

}; // struct ArmRadControl_

typedef ::sdk_sagittarius_arm::ArmRadControl_<std::allocator<void> > ArmRadControl;

typedef boost::shared_ptr< ::sdk_sagittarius_arm::ArmRadControl > ArmRadControlPtr;
typedef boost::shared_ptr< ::sdk_sagittarius_arm::ArmRadControl const> ArmRadControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sdk_sagittarius_arm::ArmRadControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sdk_sagittarius_arm::ArmRadControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sdk_sagittarius_arm::ArmRadControl_<ContainerAllocator1> & lhs, const ::sdk_sagittarius_arm::ArmRadControl_<ContainerAllocator2> & rhs)
{
  return lhs.rad == rhs.rad;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sdk_sagittarius_arm::ArmRadControl_<ContainerAllocator1> & lhs, const ::sdk_sagittarius_arm::ArmRadControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sdk_sagittarius_arm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sdk_sagittarius_arm::ArmRadControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sdk_sagittarius_arm::ArmRadControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sdk_sagittarius_arm::ArmRadControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sdk_sagittarius_arm::ArmRadControl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdk_sagittarius_arm::ArmRadControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdk_sagittarius_arm::ArmRadControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sdk_sagittarius_arm::ArmRadControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "11133516b4bf16d55157ff6eccb0ffe0";
  }

  static const char* value(const ::sdk_sagittarius_arm::ArmRadControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x11133516b4bf16d5ULL;
  static const uint64_t static_value2 = 0x5157ff6eccb0ffe0ULL;
};

template<class ContainerAllocator>
struct DataType< ::sdk_sagittarius_arm::ArmRadControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sdk_sagittarius_arm/ArmRadControl";
  }

  static const char* value(const ::sdk_sagittarius_arm::ArmRadControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sdk_sagittarius_arm::ArmRadControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 目标位置的数组\n"
"\n"
"float64[] rad\n"
;
  }

  static const char* value(const ::sdk_sagittarius_arm::ArmRadControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sdk_sagittarius_arm::ArmRadControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rad);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmRadControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sdk_sagittarius_arm::ArmRadControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sdk_sagittarius_arm::ArmRadControl_<ContainerAllocator>& v)
  {
    s << indent << "rad[]" << std::endl;
    for (size_t i = 0; i < v.rad.size(); ++i)
    {
      s << indent << "  rad[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rad[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SDK_SAGITTARIUS_ARM_MESSAGE_ARMRADCONTROL_H
