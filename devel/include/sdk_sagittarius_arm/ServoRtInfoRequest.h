// Generated by gencpp from file sdk_sagittarius_arm/ServoRtInfoRequest.msg
// DO NOT EDIT!


#ifndef SDK_SAGITTARIUS_ARM_MESSAGE_SERVORTINFOREQUEST_H
#define SDK_SAGITTARIUS_ARM_MESSAGE_SERVORTINFOREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sdk_sagittarius_arm
{
template <class ContainerAllocator>
struct ServoRtInfoRequest_
{
  typedef ServoRtInfoRequest_<ContainerAllocator> Type;

  ServoRtInfoRequest_()
    : servo_id(0)  {
    }
  ServoRtInfoRequest_(const ContainerAllocator& _alloc)
    : servo_id(0)  {
  (void)_alloc;
    }



   typedef uint8_t _servo_id_type;
  _servo_id_type servo_id;





  typedef boost::shared_ptr< ::sdk_sagittarius_arm::ServoRtInfoRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sdk_sagittarius_arm::ServoRtInfoRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ServoRtInfoRequest_

typedef ::sdk_sagittarius_arm::ServoRtInfoRequest_<std::allocator<void> > ServoRtInfoRequest;

typedef boost::shared_ptr< ::sdk_sagittarius_arm::ServoRtInfoRequest > ServoRtInfoRequestPtr;
typedef boost::shared_ptr< ::sdk_sagittarius_arm::ServoRtInfoRequest const> ServoRtInfoRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sdk_sagittarius_arm::ServoRtInfoRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sdk_sagittarius_arm::ServoRtInfoRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sdk_sagittarius_arm::ServoRtInfoRequest_<ContainerAllocator1> & lhs, const ::sdk_sagittarius_arm::ServoRtInfoRequest_<ContainerAllocator2> & rhs)
{
  return lhs.servo_id == rhs.servo_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sdk_sagittarius_arm::ServoRtInfoRequest_<ContainerAllocator1> & lhs, const ::sdk_sagittarius_arm::ServoRtInfoRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sdk_sagittarius_arm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sdk_sagittarius_arm::ServoRtInfoRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sdk_sagittarius_arm::ServoRtInfoRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sdk_sagittarius_arm::ServoRtInfoRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sdk_sagittarius_arm::ServoRtInfoRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdk_sagittarius_arm::ServoRtInfoRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdk_sagittarius_arm::ServoRtInfoRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sdk_sagittarius_arm::ServoRtInfoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acb16072ea21cd71e884ac51239c2a0c";
  }

  static const char* value(const ::sdk_sagittarius_arm::ServoRtInfoRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xacb16072ea21cd71ULL;
  static const uint64_t static_value2 = 0xe884ac51239c2a0cULL;
};

template<class ContainerAllocator>
struct DataType< ::sdk_sagittarius_arm::ServoRtInfoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sdk_sagittarius_arm/ServoRtInfoRequest";
  }

  static const char* value(const ::sdk_sagittarius_arm::ServoRtInfoRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sdk_sagittarius_arm::ServoRtInfoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Get servo realtime state\n"
"# servo_id : 1~7\n"
"\n"
"uint8 servo_id\n"
"\n"
;
  }

  static const char* value(const ::sdk_sagittarius_arm::ServoRtInfoRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sdk_sagittarius_arm::ServoRtInfoRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.servo_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ServoRtInfoRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sdk_sagittarius_arm::ServoRtInfoRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sdk_sagittarius_arm::ServoRtInfoRequest_<ContainerAllocator>& v)
  {
    s << indent << "servo_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.servo_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SDK_SAGITTARIUS_ARM_MESSAGE_SERVORTINFOREQUEST_H
