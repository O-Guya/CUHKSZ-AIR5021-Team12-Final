// Auto-generated. Do not edit!

// (in-package sagittarius_object_color_detector.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class SGRCtrlGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.grasp_type = null;
      this.action_type = null;
      this.pos_x = null;
      this.pos_y = null;
      this.pos_z = null;
      this.pos_roll = null;
      this.pos_pitch = null;
      this.pos_yaw = null;
    }
    else {
      if (initObj.hasOwnProperty('grasp_type')) {
        this.grasp_type = initObj.grasp_type
      }
      else {
        this.grasp_type = 0;
      }
      if (initObj.hasOwnProperty('action_type')) {
        this.action_type = initObj.action_type
      }
      else {
        this.action_type = 0;
      }
      if (initObj.hasOwnProperty('pos_x')) {
        this.pos_x = initObj.pos_x
      }
      else {
        this.pos_x = 0.0;
      }
      if (initObj.hasOwnProperty('pos_y')) {
        this.pos_y = initObj.pos_y
      }
      else {
        this.pos_y = 0.0;
      }
      if (initObj.hasOwnProperty('pos_z')) {
        this.pos_z = initObj.pos_z
      }
      else {
        this.pos_z = 0.0;
      }
      if (initObj.hasOwnProperty('pos_roll')) {
        this.pos_roll = initObj.pos_roll
      }
      else {
        this.pos_roll = 0.0;
      }
      if (initObj.hasOwnProperty('pos_pitch')) {
        this.pos_pitch = initObj.pos_pitch
      }
      else {
        this.pos_pitch = 0.0;
      }
      if (initObj.hasOwnProperty('pos_yaw')) {
        this.pos_yaw = initObj.pos_yaw
      }
      else {
        this.pos_yaw = 0.0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type SGRCtrlGoal
    // Serialize message field [grasp_type]
    bufferOffset = _serializer.uint8(obj.grasp_type, buffer, bufferOffset);
    // Serialize message field [action_type]
    bufferOffset = _serializer.uint8(obj.action_type, buffer, bufferOffset);
    // Serialize message field [pos_x]
    bufferOffset = _serializer.float64(obj.pos_x, buffer, bufferOffset);
    // Serialize message field [pos_y]
    bufferOffset = _serializer.float64(obj.pos_y, buffer, bufferOffset);
    // Serialize message field [pos_z]
    bufferOffset = _serializer.float64(obj.pos_z, buffer, bufferOffset);
    // Serialize message field [pos_roll]
    bufferOffset = _serializer.float64(obj.pos_roll, buffer, bufferOffset);
    // Serialize message field [pos_pitch]
    bufferOffset = _serializer.float64(obj.pos_pitch, buffer, bufferOffset);
    // Serialize message field [pos_yaw]
    bufferOffset = _serializer.float64(obj.pos_yaw, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type SGRCtrlGoal
    let len;
    let data = new SGRCtrlGoal(null);
    // Deserialize message field [grasp_type]
    data.grasp_type = _deserializer.uint8(buffer, bufferOffset);
    // Deserialize message field [action_type]
    data.action_type = _deserializer.uint8(buffer, bufferOffset);
    // Deserialize message field [pos_x]
    data.pos_x = _deserializer.float64(buffer, bufferOffset);
    // Deserialize message field [pos_y]
    data.pos_y = _deserializer.float64(buffer, bufferOffset);
    // Deserialize message field [pos_z]
    data.pos_z = _deserializer.float64(buffer, bufferOffset);
    // Deserialize message field [pos_roll]
    data.pos_roll = _deserializer.float64(buffer, bufferOffset);
    // Deserialize message field [pos_pitch]
    data.pos_pitch = _deserializer.float64(buffer, bufferOffset);
    // Deserialize message field [pos_yaw]
    data.pos_yaw = _deserializer.float64(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    return 50;
  }

  static datatype() {
    // Returns string type for a message object
    return 'sagittarius_object_color_detector/SGRCtrlGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '50de9136543629965d564bc3ef4187c9';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Define the goal
    
    # grasp_type 参数的定义项
    # 设置当前夹爪状态，在动作执行之前设置
    uint8 GRASP_NONE = 0 # 自定义动作下使用，夹爪不做处理
    uint8 GRASP_OPEN = 1 # 打开夹爪, 放下动作
    uint8 GRASP_CLOSE = 2 # 闭合夹爪, 抓取动作
    
    # action_type 参数的定义项
    # 需要执行动作的类型，可以指定末端姿态或者自动计算
    # 自定义姿态：是让机械臂到某个目标点
    # 预设动作：是执行某个预设的一系列动作
    uint8 ACTION_TYPE_XYZ = 0 # 自定义姿态：末端姿态使用动态计算
    uint8 ACTION_TYPE_XYZ_RPY = 1 # 自定义姿态：末端姿态使用给定姿态
    uint8 ACTION_TYPE_DEFINE_STAY = 2 # 预设动作：待机状态
    uint8 ACTION_TYPE_DEFINE_SAVE = 3 # 预设动作：安全位置状态
    uint8 ACTION_TYPE_PICK_XYZ = 4 # 预设动作：XYZ拾取动作
    uint8 ACTION_TYPE_PICK_XYZ_RPY = 5 # 预设动作：XYZ+RPY拾取动作
    uint8 ACTION_TYPE_PUT_XYZ = 6 # 预设动作：XYZ放下动作
    uint8 ACTION_TYPE_PUT_XYZ_RPY = 7 # 预设动作：XYZ+RPY放下动作
    
    uint8 grasp_type  # 末端初始化状态
    uint8 action_type  # 动作类型
    
    # 目标点位置
    float64 pos_x
    float64 pos_y
    float64 pos_z
    float64 pos_roll
    float64 pos_pitch
    float64 pos_yaw
    
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new SGRCtrlGoal(null);
    if (msg.grasp_type !== undefined) {
      resolved.grasp_type = msg.grasp_type;
    }
    else {
      resolved.grasp_type = 0
    }

    if (msg.action_type !== undefined) {
      resolved.action_type = msg.action_type;
    }
    else {
      resolved.action_type = 0
    }

    if (msg.pos_x !== undefined) {
      resolved.pos_x = msg.pos_x;
    }
    else {
      resolved.pos_x = 0.0
    }

    if (msg.pos_y !== undefined) {
      resolved.pos_y = msg.pos_y;
    }
    else {
      resolved.pos_y = 0.0
    }

    if (msg.pos_z !== undefined) {
      resolved.pos_z = msg.pos_z;
    }
    else {
      resolved.pos_z = 0.0
    }

    if (msg.pos_roll !== undefined) {
      resolved.pos_roll = msg.pos_roll;
    }
    else {
      resolved.pos_roll = 0.0
    }

    if (msg.pos_pitch !== undefined) {
      resolved.pos_pitch = msg.pos_pitch;
    }
    else {
      resolved.pos_pitch = 0.0
    }

    if (msg.pos_yaw !== undefined) {
      resolved.pos_yaw = msg.pos_yaw;
    }
    else {
      resolved.pos_yaw = 0.0
    }

    return resolved;
    }
};

// Constants for message
SGRCtrlGoal.Constants = {
  GRASP_NONE: 0,
  GRASP_OPEN: 1,
  GRASP_CLOSE: 2,
  ACTION_TYPE_XYZ: 0,
  ACTION_TYPE_XYZ_RPY: 1,
  ACTION_TYPE_DEFINE_STAY: 2,
  ACTION_TYPE_DEFINE_SAVE: 3,
  ACTION_TYPE_PICK_XYZ: 4,
  ACTION_TYPE_PICK_XYZ_RPY: 5,
  ACTION_TYPE_PUT_XYZ: 6,
  ACTION_TYPE_PUT_XYZ_RPY: 7,
}

module.exports = SGRCtrlGoal;
